{
  "name": "node-python",
  "version": "0.0.3",
  "description": "Call python stuff from nodejs",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/JeanSebTr/node-python.git"
  },
  "bugs": {
    "url": "https://github.com/JeanSebTr/node-python/issues"
  },
  "keywords": [
    "python",
    "bridge"
  ],
  "author": {
    "name": "Jean-SÃ©bastien Tremblay",
    "email": "jeansebtr@xpensia.com",
    "url": "http://blog.jeansebtr.com"
  },
  "contributors": [
    {
      "name": "Chris Dickinson",
      "email": "chris@neversaw.us"
    }
  ],
  "scripts": {
    "test": "node test/linker.js",
    "install": "node-gyp rebuild"
  },
  "license": "BSD",
  "gypfile": true,
  "readmeFilename": "README.md",
  "readme": "# node-python binding \n\npython bridge for nodejs!\n\n[![Build Status](https://travis-ci.org/JeanSebTr/node-python.png)](https://travis-ci.org/JeanSebTr/node-python)\n\nForked from [chrisdickinson/node-python](https://github.com/chrisdickinson/node-python) and updated to use node-gyp\n\n## Installation\n\n```npm install node-python```\n\nTested on OSX 10.7.4 with node 0.8.15\n\n## Usage\n\n[I](https://github.com/chrisdickinson) bumped this up from \"playground\" to \"binding\" on account of it starting to feel like the\nright thing to do. \n\nThis is a binding between Node.js and Python; unfortunately as written it actually embeds a\npython process inside of Node. It's of extremely alpha quality and was originally written with\nthe intent of getting a better understanding of the internals of both V8 and CPython.\n\nBut, yeah, okay. So the cool things:\n\n    var sys = require('sys');\n    var python = require('./binding');\n    var pysys = python.import('sys');\n    sys.puts(pysys.toString());\n\nWill output python's `sys.path`. And passing in arguments works, too:\n\n    var python = require('./binding'),\n    os = python.import('os'),\n    cwd = os.getcwd(),\n    basename = os.path.basename(cwd);\n\n    var sys = require('sys');\n\n    sys.puts(basename.toString());\n\nUnfortunately Python objects are not really fully translated into native Javascript objects yet;\nyou have to cast them from whatever they are into whatever you want them to be. At the moment, the\nonly provided cast is \"toString\", but that should change in the near future (hopefully).\n\nPassing python objects that you get from calling python functions from javascript can seamlessly\nbe passed back into python functions (no casting required). Currently there's what [I](https://github.com/chrisdickinson) assume to be\na passable argument translation implementation for simple Objects (ones that act like dicts), \nArrays, Numbers (maybe?), and Strings.\n\nYou can slap together a tiny WSGI hosting thing on it, as well, which is provided in `wsgi.js`.\nIt's half implemented, but it's midnight on a Sunday and [I](https://github.com/chrisdickinson) should probably sleep.\n",
  "_id": "node-python@0.0.3",
  "dist": {
    "shasum": "90a421dcc69e3f7c217dedb8708caf5ea7d1e96a"
  },
  "_from": "node-python@",
  "_resolved": "https://registry.npmjs.org/node-python/-/node-python-0.0.3.tgz"
}
